{
	"info": {
		"_postman_id": "820f6d6e-0c48-4c2f-a983-89e629a99dfd",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20549509"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port}}/first",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = request.data;\r",
							"\r",
							"pm.test(\"The name in response is the same\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Kolobok\");\r",
							"});\r",
							"\r",
							"pm.test(\"The name in request and in response is the same\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"pm.test(\"The age in response is the same\", function () {\r",
							"    pm.expect(resp.age).to.eql(\"22\");\r",
							"});\r",
							"\r",
							"pm.test(\"The age in request and in response is the same\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"pm.test(\"The salary in response is the same\", function () {\r",
							"    pm.expect(resp.salary).to.eql(2345);\r",
							"});\r",
							"\r",
							"pm.test(\"The salary in request and in response is the same\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"The salary 1.5 year is 4 * salary\", function () {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary * 4);\r",
							"});\r",
							"\r",
							"console.log(resp.family);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kolobok",
							"type": "text"
						},
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2345",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_3",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = pm.request;\r",
							"\r",
							"pm.test(\"The name in request and in response is the same\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.url.query.get(\"name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"The age in request and in response is the same\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.url.query.get(\"age\"));\r",
							"});\r",
							"\r",
							"pm.test(\"The salary in request and in response is the same\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.url.query.get(\"salary\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Param Dog has param Name\", function (){\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"Param Dog has param Age\", function (){\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"Name of the Dog is Lucky\", function (){\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"\r",
							"pm.test(\"Age of the Dog is 4\", function (){\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4)\r",
							"});\r",
							"\r",
							"console.log(resp.family)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{ip_port}}/object_info_3?name=Ded_Mazay&age=87&salary=12",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ded_Mazay"
						},
						{
							"key": "age",
							"value": "87"
						},
						{
							"key": "salary",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = pm.request;\r",
							"\r",
							"console.log(\"Salary in request is -- \" + req.url.query.get(\"salary\"));\r",
							"console.log(\"Salary in response is -- \" + resp.salary);\r",
							"console.log(\"The first elem in salary in response is -- \" + resp.salary[0]);\r",
							"console.log(\"The second elem in salary in response is -- \" + resp.salary[1]);\r",
							"console.log(\"The third elem in salary in response is -- \" + resp.salary[2]);\r",
							"\r",
							"pm.test(\"The name in request and in response is the same\", function () {\r",
							"    pm.expect(resp.name).to.be.eql(req.url.query.get(\"name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"The age in request and in response is the same\", function () {\r",
							"    pm.expect(resp.age).to.be.eql(+req.url.query.get(\"age\"));\r",
							"});\r",
							"\r",
							"pm.test(\"The salary in request is the same with first elem in response salary\", function () {\r",
							"    pm.expect(resp.salary[0]).to.be.eql(+req.url.query.get(\"salary\"));\r",
							"});\r",
							"\r",
							"pm.test(\"The 2*salary in request is the same with second elem in response salary\", function () {\r",
							"    pm.expect(+resp.salary[1]).to.be.eql(+req.url.query.get(\"salary\") * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"The 3*salary in request is the same with third elem in response salary\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.be.eql(+req.url.query.get(\"salary\") * 3);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"name\", req.url.query.get(\"name\"))\r",
							"pm.environment.set(\"age\", req.url.query.get(\"age\"))\r",
							"pm.environment.set(\"salary\", req.url.query.get(\"salary\"))\r",
							"\r",
							"for (let i = 0; i < resp.salary.length; i++) {\r",
							"    console.log(\"The \" + i + \" elem of salary in response is -- \" + resp.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{ip_port}}/object_info_4?name=Ded_Mazay&age=87&salary=12",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ded_Mazay"
						},
						{
							"key": "age",
							"value": "87"
						},
						{
							"key": "salary",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = request.data;\r",
							"console.log(resp);\r",
							"\r",
							"pm.test(\"The param start_qa_salary exists in response\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"pm.test(\"The param qa_salary_after_6_months exists in response\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"The param qa_salary_after_12_months exists in response\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"The param qa_salary_after_1.5_year exists in response\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"pm.test(\"The param qa_salary_after_3.5_years exists in response\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"pm.test(\"The param person exists in response\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"pm.test(\"The start_qa_salary in response is the same with start_qa_salary in request\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.be.eql(+req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"The qa_salary_after_6_months in response is 2*start_qa_salary in request\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.be.eql(+req.salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"The qa_salary_after_12_months in response is 2.7*start_qa_salary in request\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.be.eql(+req.salary * 2.7);\r",
							"});\r",
							"\r",
							"pm.test(\"The qa_salary_after_1.5_year in response is 3.3*start_qa_salary in request\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.be.eql(+req.salary * 3.3);\r",
							"});\r",
							"\r",
							"pm.test(\"The qa_salary_after_3.5_year in response is 3.8*start_qa_salary in request\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.be.eql(+req.salary * 3.8);\r",
							"});\r",
							"\r",
							"pm.test(\"The 1st elem in person.u_name in response is salary in request\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.be.eql(+req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"The person.u_age in response is age in request\", function () {\r",
							"    pm.expect(resp.person.u_age).to.be.eql(+req.age);\r",
							"});\r",
							"\r",
							"pm.test(\"The u_salary_5_years in response is 4.2*start_qa_salary in request\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.be.eql(+req.salary * 4.2);\r",
							"});\r",
							"\r",
							"for (param in resp.person) {\r",
							"    console.log(\"Param \" + param + \" is \" + resp.person[param]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_2",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}